{"version":3,"sources":["play.js"],"names":["drawPeace","judgeX","judgeY","i","j","ctx","canvas2","getContext","x","a","y","b","r","console","log","Math","PI","fillStyle","turnStone","c","arc","fill","returnStones","judge","ia","jb","n","peaces","push","element","forEach","peacePraceReturn","beginPath","addEventListener","e","concat","layerX","layerY"],"mappings":"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","file":"play.min.js","sourcesContent":["// import canvas1 from \"./script/canvas1\";\n// import canvas2 from \"./script/canvas2\";\n// const canvas1 = document.getElementById(\"canvas1\");\n// const canvas2 = document.getElementById(\"canvas2\");\n// let { width, height } = canvas1; // canvasのwidthとheightを取得\n// let a = width / 8; // 1マスの一辺の長さ\n\ncanvas2.addEventListener(\"click\", function (e) {\n  // console.log(e.layerX + \" \", e.layerY);\n  let judge = false;\n  for (let i = 0; i < 8; i++) {\n    console.log(`iは${i}`);\n    for (let j = 0; j < 8; j++) {\n      let judgeX = a * j;\n      let judgeY = a * i;\n      console.log(`jは${j}`);\n\n      if (judgeX < e.layerX && judgeX + a > e.layerX) {\n        console.log(`X軸は${e.layerX}の位置をクリックしました`);\n        if (judgeY < e.layerY && judgeY + b > e.layerY) {\n          console.log(`Y軸は${e.layerY}の位置をクリックしました`);\n          if (peaces[i][j] !== 0) {\n            console.log(`クリック位置[${i},${j}]には既に石があります`);\n            return;\n          }\n          console.log(i, j);\n          judge = true;\n          console.log(judgeX, \"< おいた石 <\", judgeX + a);\n          console.log(judgeY, \"< おいた石 <\", judgeY + b);\n          // console.log(`${judgeX} ${judgeY}`);\n          peaces[i][j] = 1;\n          console.log(peaces);\n          drawPeace(judgeX, judgeY, i, j);\n\n          break;\n        }\n      } else {\n        continue;\n      }\n    }\n    if (judge) break;\n  }\n});\n\nfunction drawPeace(judgeX, judgeY, i, j) {\n  // console.log(i, j);\n\n  let ctx = canvas2.getContext(\"2d\");\n  let x = judgeX + a / 2; //X軸\n  let y = judgeY + b / 2; //Y軸\n  let r = a * 0.4; // 半径\n  console.log(x, \" \", y);\n  ctx.beginPath(); // パスのリセット\n  ctx.arc(x, y, r, 0, 2 * Math.PI, false);\n  ctx.fillStyle = \"black\"; // 塗る色を黒に\n  ctx.fill(); // 塗る\n  turnStone(i, j);\n}\n\nfunction turnStone(i, j) {\n  // console.log(i, j);\n  let c = [\n    [-1, -1],\n    [-1, 0],\n    [-1, 1],\n    [0, -1],\n    [0, 1],\n    [1, -1],\n    [1, 0],\n    [1, 1],\n  ];\n\n  let returnStones = [];\n  let judge = 0;\n  let ia = 0;\n  let jb = 0;\n  if (peaces[i][j] === 1) {\n    judge = -1;\n  } else if (peaces[i][j] === -1) {\n    judge = 1;\n  }\n  for (let n = 0; n < 8; n++) {\n    ia = i + c[n][0];\n    jb = j + c[n][1];\n    console.log(ia, \" \", jb);\n    if (peaces[ia][jb] === 0) {\n      // peacePraceReturn(c[0]);\n      console.log(`座標[${ia},${jb}]は空です。`);\n    } else if (peaces[ia][jb] === judge) {\n      console.log(ia, \" \", jb, \"石の色が違います。\");\n\n      do {\n        returnStones.push([ia, jb]);\n        ia += c[n][0];\n        jb += c[n][1];\n        // if (peaces[ia][jb] === 0) d = \"\";\n      } while (peaces[ia][jb] === judge);\n      if (peaces[ia][jb] === 0) {\n        returnStones = [];\n        console.log(returnStones);\n      } else if (peaces[ia][jb] !== judge) {\n        returnStones.forEach((element) => {\n          if (peaces[element[0]][element[1]] === 1) {\n            peaces[element[0]][element[1]] = -1;\n          } else if (peaces[element[0]][element[1]] === -1) {\n            peaces[element[0]][element[1]] = 1;\n          }\n        });\n        peacePraceReturn(returnStones);\n      }\n\n      continue;\n    } else {\n      console.log(\"石色が同じです。\");\n    }\n  }\n}\n\nfunction peacePraceReturn(returnStones) {\n  returnStones.forEach((element) => {\n    console.log(peaces[element[0]][element[1]]);\n    let judgeX = a * element[1];\n    let judgeY = a * element[0];\n    let ctx = canvas2.getContext(\"2d\");\n    let x = judgeX + a / 2; //X軸\n    let y = judgeY + b / 2; //Y軸\n    let r = a * 0.4; // 半径\n    // console.log(x, \" \", y);\n    ctx.beginPath(); // パスのリセット\n    ctx.arc(x, y, r, 0, 2 * Math.PI, false);\n    if (peaces[element[0]][element[1]] === 1) {\n      ctx.fillStyle = \"black\"; // 塗る色を黒に\n    } else if (peaces[element[0]][element[1]] === -1) {\n      ctx.fillStyle = \"white\";\n    }\n    ctx.fill(); // 塗る\n    console.log(peaces);\n    turnStone(element[0], element[1]);\n  });\n}\n"]}