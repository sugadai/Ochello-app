{"version":3,"sources":["play.js"],"names":["turnPlarer","drawPeace","judgeX","judgeY","i","j","ctx","judge","getContext","x","a","y","b","r","console","beginPath","canvas2","PI","fillStyle","turnStone","fill","returnStones","c","log","peaces","jb","n","ia","concat","push","forEach","element","peacePraceReturn","winnerCheck","winnerJudge","winnerJudgeCheckFinish","winnerCheckFinish","e","addEventListener","layerX","layerY"],"mappings":"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","file":"play.min.js","sourcesContent":["// import canvas1 from \"./script/canvas1\";\n// import canvas2 from \"./script/canvas2\";\n// const canvas1 = document.getElementById(\"canvas1\");\n// const canvas2 = document.getElementById(\"canvas2\");\n// let { width, height } = canvas1; // canvasのwidthとheightを取得\n// let a = width / 8; // 1マスの一辺の長さ\nlet turnPlarer = 1; //出番の初期化（黒の番から始まる）\n\ncanvas2.addEventListener(\"click\", function (e) {\n  // console.log(e.layerX + \" \", e.layerY);\n  let judge = false;\n  for (let i = 0; i < 8; i++) {\n    console.log(`iは${i}`);\n    for (let j = 0; j < 8; j++) {\n      let judgeX = a * j;\n      let judgeY = a * i;\n      console.log(`jは${j}`);\n\n      if (judgeX < e.layerX && judgeX + a > e.layerX) {\n        console.log(`X軸は${e.layerX}の位置をクリックしました`);\n        if (judgeY < e.layerY && judgeY + b > e.layerY) {\n          console.log(`Y軸は${e.layerY}の位置をクリックしました`);\n          if (peaces[i][j] !== 0) {\n            console.log(`クリック位置[${i},${j}]には既に石があります`);\n            return;\n          }\n          console.log(i, j);\n          judge = true;\n          console.log(judgeX, \"< おいた石 <\", judgeX + a);\n          console.log(judgeY, \"< おいた石 <\", judgeY + b);\n          // console.log(`${judgeX} ${judgeY}`);\n          if (turnPlarer === 1) {\n            peaces[i][j] = 1;\n          } else if (turnPlarer === -1) {\n            peaces[i][j] = -1;\n          }\n\n          console.log(peaces);\n          console.log(turnPlarer);\n          drawPeace(judgeX, judgeY, i, j, turnPlarer);\n\n          break;\n        }\n      } else {\n        continue;\n      }\n    }\n    if (judge) break;\n  }\n});\n\nfunction drawPeace(judgeX, judgeY, i, j, turnPlarer) {\n  // console.log(i, j);\n\n  let ctx = canvas2.getContext(\"2d\");\n  let x = judgeX + a / 2; //X軸\n  let y = judgeY + b / 2; //Y軸\n  let r = a * 0.4; // 半径\n  console.log(x, \" \", y);\n  ctx.beginPath(); // パスのリセット\n  ctx.arc(x, y, r, 0, 2 * Math.PI, false);\n  if (turnPlarer === 1) {\n    ctx.fillStyle = \"black\"; // 塗る色を黒に\n  } else if (turnPlarer === -1) {\n    ctx.fillStyle = \"white\"; // 塗る色を白に\n  }\n\n  ctx.fill(); // 塗る\n  turnStone(i, j);\n}\n\nfunction turnStone(i, j) {\n  // console.log(i, j);\n  let c = [\n    [-1, -1],\n    [-1, 0],\n    [-1, 1],\n    [0, -1],\n    [0, 1],\n    [1, -1],\n    [1, 0],\n    [1, 1],\n  ];\n\n  let returnStones = [];\n  let judge = 0;\n  let ia = 0;\n  let jb = 0;\n  console.log(peaces[i][j]);\n  if (peaces[i][j] === 1) {\n    judge = -1;\n  } else if (peaces[i][j] === -1) {\n    judge = 1;\n  }\n  for (let n = 0; n < 8; n++) {\n    ia = i + c[n][0];\n    jb = j + c[n][1];\n    console.log(ia, \" \", jb);\n    if (peaces[ia][jb] === 0) {\n      // peacePraceReturn(c[0]);\n      console.log(`座標[${ia},${jb}]は空です。`);\n    } else if (peaces[ia][jb] === judge) {\n      console.log(ia, \" \", jb, \"石の色が違います。\");\n\n      do {\n        returnStones.push([ia, jb]);\n        ia += c[n][0];\n        jb += c[n][1];\n        // if (peaces[ia][jb] === 0) d = \"\";\n      } while (peaces[ia][jb] === judge);\n      console.log(returnStones);\n      if (peaces[ia][jb] === 0) {\n        returnStones = [];\n        console.log(returnStones);\n      } else if (peaces[ia][jb] !== judge) {\n        // if (judge === 1) {\n        //   turnPlarer = -1;\n        // } else if (judge === 1) {\n        //   turnPlarer = -1;\n        // }\n        turnPlarer = judge;\n        console.log(\"次は\", turnPlarer, \"の番です。\");\n        returnStones.forEach((element) => {\n          if (peaces[element[0]][element[1]] === 1) {\n            peaces[element[0]][element[1]] = -1;\n          } else if (peaces[element[0]][element[1]] === -1) {\n            peaces[element[0]][element[1]] = 1;\n          }\n        });\n        peacePraceReturn(returnStones);\n      }\n\n      continue;\n    } else {\n      console.log(\"石色が同じです。\");\n    }\n  }\n}\n\nfunction peacePraceReturn(returnStones) {\n  returnStones.forEach((element) => {\n    console.log(peaces[element[0]][element[1]]);\n    let judgeX = a * element[1];\n    let judgeY = a * element[0];\n    let ctx = canvas2.getContext(\"2d\");\n    let x = judgeX + a / 2; //X軸\n    let y = judgeY + b / 2; //Y軸\n    let r = a * 0.4; // 半径\n    // console.log(x, \" \", y);\n    ctx.beginPath(); // パスのリセット\n    ctx.arc(x, y, r, 0, 2 * Math.PI, false);\n    if (peaces[element[0]][element[1]] === 1) {\n      ctx.fillStyle = \"black\"; // 塗る色を黒に\n    } else if (peaces[element[0]][element[1]] === -1) {\n      ctx.fillStyle = \"white\";\n    }\n    ctx.fill(); // 塗る\n    console.log(peaces);\n    winnerCheck();\n    // turnStone(element[0], element[1]);\n  });\n}\n\nfunction winnerCheck() {\n  let winnerJudge = 0;\n  winnerJudgeCheckFinish: for (let i = 0; i < 8; i++) {\n    for (let j = 0; j < 8; j++) {\n      if (peaces[i][j] === 1) {\n        winnerJudge = 1;\n        break winnerJudgeCheckFinish;\n      } else if (peaces[i][j] === -1) {\n        winnerJudge = -1;\n        break winnerJudgeCheckFinish;\n      }\n    }\n  }\n  console.log(winnerJudge);\n  winnerCheckFinish: for (let i = 0; i < 8; i++) {\n    for (let j = 0; j < 8; j++) {\n      if (peaces[i][j] !== winnerJudge && peaces[i][j] !== 0) {\n        console.log(i, \" \", j, \"石が埋まっていませんゲームを続行してください\");\n        winnerJudge = 0;\n        break winnerCheckFinish;\n      }\n    }\n  }\n  if (winnerJudge !== 0) {\n    console.log(\"石が全て\", winnerJudge, \"で埋まりました。\");\n  }\n}\n"]}